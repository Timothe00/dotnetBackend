// <auto-generated />
using System;
using Backend.business.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.business.DataAccess.Migrations
{
    [DbContext(typeof(ManagementPresenceDbContext))]
    [Migration("20230316104924_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.business.DataAccess.Models.Absence", b =>
                {
                    b.Property<int>("AbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbsenceId"), 1L, 1);

                    b.Property<string>("AbsenceReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HourArrived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HourDeparture")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSession")
                        .HasColumnType("int");

                    b.Property<int?>("IdSessionCours")
                        .HasColumnType("int");

                    b.Property<int>("IdStudent")
                        .HasColumnType("int");

                    b.Property<int?>("SessionCoursId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("AbsenceId");

                    b.HasIndex("SessionCoursId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Matters", b =>
                {
                    b.Property<int>("MatterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatterId"), 1L, 1);

                    b.Property<string>("MatterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatterId");

                    b.ToTable("Matters");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("PermissionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.SessionCours", b =>
                {
                    b.Property<int>("SessionCoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionCoursId"), 1L, 1);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("HourEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatterId")
                        .HasColumnType("int");

                    b.Property<int?>("MattersMatterId")
                        .HasColumnType("int");

                    b.Property<string>("Semestre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Years")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionCoursId");

                    b.HasIndex("MattersMatterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SessionCours");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UsersEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Admin", b =>
                {
                    b.HasBaseType("Backend.business.DataAccess.Models.Users");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Student", b =>
                {
                    b.HasBaseType("Backend.business.DataAccess.Models.Users");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Teacher", b =>
                {
                    b.HasBaseType("Backend.business.DataAccess.Models.Users");

                    b.Property<int>("IdSessionCours")
                        .HasColumnType("int");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Absence", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.SessionCours", "SessionCours")
                        .WithMany("Absences")
                        .HasForeignKey("SessionCoursId");

                    b.HasOne("Backend.business.DataAccess.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("SessionCours");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Permission", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Student", "Student")
                        .WithMany("Permissions")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.SessionCours", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Matters", "Matters")
                        .WithMany("SessionCours")
                        .HasForeignKey("MattersMatterId");

                    b.HasOne("Backend.business.DataAccess.Models.Teacher", "Teacher")
                        .WithMany("SessionCours")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matters");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Users", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Admin", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Users", null)
                        .WithOne()
                        .HasForeignKey("Backend.business.DataAccess.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Student", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Users", null)
                        .WithOne()
                        .HasForeignKey("Backend.business.DataAccess.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Teacher", b =>
                {
                    b.HasOne("Backend.business.DataAccess.Models.Users", null)
                        .WithOne()
                        .HasForeignKey("Backend.business.DataAccess.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Matters", b =>
                {
                    b.Navigation("SessionCours");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.SessionCours", b =>
                {
                    b.Navigation("Absences");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Backend.business.DataAccess.Models.Teacher", b =>
                {
                    b.Navigation("SessionCours");
                });
#pragma warning restore 612, 618
        }
    }
}
